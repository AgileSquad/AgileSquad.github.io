<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-03-17T22:50:54-07:00</updated><id>http://localhost:4000/</id><title type="html">EastonLee</title><subtitle></subtitle><author><name>Easton Lee</name><email>me@eastonlee.com</email></author><entry><title type="html">Machine Learning by Stanford University</title><link href="http://localhost:4000/blog/2017/03/15/machine-learning-by-stanford-university/" rel="alternate" type="text/html" title="Machine Learning by Stanford University" /><published>2017-03-15T00:00:00-07:00</published><updated>2017-03-15T00:00:00-07:00</updated><id>http://localhost:4000/blog/2017/03/15/machine-learning-by-stanford-university</id><content type="html" xml:base="http://localhost:4000/blog/2017/03/15/machine-learning-by-stanford-university/">&lt;script src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;

&lt;p&gt;This course is one of the most famous courses on Coursera. Now I go two weeks ahead of the deadline and reach Week 5, I plan to finish it in the flowing few days.&lt;/p&gt;

&lt;p&gt;This course is the perfect choice if you are not satisfied with just being able to drive some machine learning framework to work but also eager to know what is under the hood, this course will teach you the most concrete mathematical principles and equations underlying most AI applications. Overall in this course, Prof. Ng delivered profound knowledge in a comprehensive way. But this course isn’t flawless, for example Week 5 uses intuition to explain backpropogation and example applications, which I would say verbose and useless.&lt;/p&gt;

&lt;p&gt;Bellow is my note of important concept, it may be incomplete and biased, feel free to leave comment and let me know, I will keep it updated.&lt;/p&gt;

&lt;p&gt;The Syllabus skeleton is left, to remind readers in which section that concept is taught.&lt;/p&gt;

&lt;h1 id=&quot;week-1-introduction&quot;&gt;Week 1: Introduction&lt;/h1&gt;

&lt;p&gt;Supervised Learning and Unsupervised Learning&lt;/p&gt;

&lt;h1 id=&quot;week-2&quot;&gt;Week 2:&lt;/h1&gt;

&lt;h2 id=&quot;multivariate-linear-regression&quot;&gt;Multivariate Linear Regression&lt;/h2&gt;

&lt;h3 id=&quot;multiple-features&quot;&gt;Multiple Features&lt;/h3&gt;

&lt;h3 id=&quot;gradient-descent-for-multiple-variables&quot;&gt;Gradient Descent For Multiple Variables&lt;/h3&gt;

&lt;h3 id=&quot;gradient-descent-in-practice-i---feature-scaling&quot;&gt;Gradient Descent in Practice I - Feature Scaling&lt;/h3&gt;

&lt;h3 id=&quot;gradient-descent-in-practice-ii---learning-rate&quot;&gt;Gradient Descent in Practice II - Learning Rate&lt;/h3&gt;

&lt;h3 id=&quot;features-and-polynomial-regression&quot;&gt;Features and Polynomial Regression&lt;/h3&gt;

&lt;h2 id=&quot;computing-parameters-analytically&quot;&gt;Computing Parameters Analytically&lt;/h2&gt;

&lt;h3 id=&quot;normal-equation&quot;&gt;Normal Equation&lt;/h3&gt;

&lt;h3 id=&quot;normal-equation-noninvertibility&quot;&gt;Normal Equation Noninvertibility&lt;/h3&gt;

&lt;h1 id=&quot;week-3-logistic-regression&quot;&gt;Week 3: Logistic Regression&lt;/h1&gt;

&lt;p&gt;Questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Is the gradient too small?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Why logistic regression has advantage over linear regression when it comes to classification.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;http://www.theanalysisfactor.com/why-logistic-regression-for-binary-response/&lt;/p&gt;

&lt;h2 id=&quot;classification-and-representation&quot;&gt;Classification and Representation&lt;/h2&gt;

&lt;h3 id=&quot;classification&quot;&gt;Classification&lt;/h3&gt;

&lt;h3 id=&quot;hypothesis-representation&quot;&gt;Hypothesis Representation&lt;/h3&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta(x)=g(\theta^Tx)&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;z=\theta^Tx&lt;/script&gt;
&lt;script type=&quot;math/tex&quot;&gt;g(z)=\frac{1}{1+e^{-z}}&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;decision-boundary&quot;&gt;Decision Boundary&lt;/h3&gt;

&lt;p&gt;TODO
convex function&lt;/p&gt;

&lt;h2 id=&quot;logistic-regression-model&quot;&gt;Logistic Regression Model&lt;/h2&gt;

&lt;h3 id=&quot;cost-function&quot;&gt;Cost Function&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta)=-\frac{1}{m}[\sum_{i=0}^{m}y^{(i)}\log h_\theta(x^{(i)})+(1-y^{(i)})\log(1-h_\theta(x^{(i)}))] + \frac{\lambda}{2m}\sum_{j=1}^{n}\theta_j^2&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\Theta)=−\frac{1}{m}\sum_{i=1}^m\sum_{k=1}^K[y^{(i)}k\log((h_\Theta(x(i)))_k)+(1−y_ k^{(i)})\log(1−(h_Theta(x^{(i)}))_k)]+\frac{λ}{2m}\sum_{l=1}^{L−1}\sum_{i=1}^{sl}\sum_{j=1}^{sl+1}(\Theta^{(l)}_{j,i})^2&lt;/script&gt;

&lt;h1 id=&quot;week-4&quot;&gt;Week 4:&lt;/h1&gt;

&lt;h3 id=&quot;simplified-cost-function-and-gradient-descent&quot;&gt;Simplified Cost Function and Gradient Descent&lt;/h3&gt;

&lt;h3 id=&quot;advanced-optimization&quot;&gt;Advanced Optimization&lt;/h3&gt;

&lt;p&gt;fminunc in Octave is very useful to auto generate cost and gradient&lt;/p&gt;

&lt;h2 id=&quot;multiclass-classification&quot;&gt;Multiclass Classification&lt;/h2&gt;

&lt;h3 id=&quot;multiclass-classification-one-vs-all&quot;&gt;Multiclass Classification: one-vs-all&lt;/h3&gt;

&lt;h2 id=&quot;solving-the-problem-of-overfitting&quot;&gt;Solving the Problem of Overfitting&lt;/h2&gt;

&lt;h3 id=&quot;the-problem-of-overfitting&quot;&gt;The Problem of Overfitting&lt;/h3&gt;

&lt;h3 id=&quot;cost-function-1&quot;&gt;Cost function&lt;/h3&gt;

&lt;h3 id=&quot;regularized-linear-regression&quot;&gt;Regularized Linear Regression&lt;/h3&gt;

&lt;h3 id=&quot;regularized-logistic-regression&quot;&gt;Regularized Logistic Regression&lt;/h3&gt;

&lt;h1 id=&quot;week-4-1&quot;&gt;Week 4&lt;/h1&gt;

&lt;h2 id=&quot;non-linear-hypotheses&quot;&gt;Non-linear Hypotheses&lt;/h2&gt;

&lt;h2 id=&quot;neurons-and-brains&quot;&gt;Neurons and Brains&lt;/h2&gt;

&lt;h2 id=&quot;neural-networks&quot;&gt;Neural Networks&lt;/h2&gt;

&lt;h3 id=&quot;model-representation&quot;&gt;Model Representation&lt;/h3&gt;

&lt;h4 id=&quot;how-to-determine-the-dimension-of-one-layer&quot;&gt;How to determine the dimension of one layer?&lt;/h4&gt;
&lt;p&gt;If network has &lt;script type=&quot;math/tex&quot;&gt;s_j&lt;/script&gt; units in layer j and &lt;script type=&quot;math/tex&quot;&gt;s_j+1&lt;/script&gt; units in layer j+1, then &lt;script type=&quot;math/tex&quot;&gt;\theta(j)&lt;/script&gt; will be of dimension &lt;script type=&quot;math/tex&quot;&gt;s_{j+1}(s_j+1)&lt;/script&gt;.&lt;/p&gt;

&lt;h4 id=&quot;forward-propagation&quot;&gt;Forward Propagation&lt;/h4&gt;

&lt;h2 id=&quot;applications&quot;&gt;Applications&lt;/h2&gt;

&lt;h3 id=&quot;examples-and-intuitions&quot;&gt;Examples and Intuitions&lt;/h3&gt;

&lt;h1 id=&quot;week-5-neural-networks-learning&quot;&gt;Week 5: Neural Networks: Learning&lt;/h1&gt;

&lt;h2 id=&quot;cost-function-and-backpropagation&quot;&gt;Cost Function and Backpropagation&lt;/h2&gt;

&lt;h3 id=&quot;cost-function-2&quot;&gt;Cost Function&lt;/h3&gt;

&lt;h3 id=&quot;backpropagation-algorithm&quot;&gt;Backpropagation Algorithm&lt;/h3&gt;

&lt;p&gt;Error(delta) of cost for Node&lt;/p&gt;

&lt;h3 id=&quot;backpropagation-intuition&quot;&gt;Backpropagation Intuition&lt;/h3&gt;

&lt;h2 id=&quot;backpropagation-in-practice&quot;&gt;Backpropagation in Practice&lt;/h2&gt;

&lt;h3 id=&quot;implementation-note-unrolling-parameters&quot;&gt;Implementation Note: Unrolling Parameters&lt;/h3&gt;

&lt;h3 id=&quot;gradient-checking&quot;&gt;Gradient Checking&lt;/h3&gt;

&lt;p&gt;gradApprox ≈ deltaVector&lt;/p&gt;

&lt;p&gt;The code to compute gradApprox can be very slow&lt;/p&gt;

&lt;h3 id=&quot;random-initialization&quot;&gt;Random Initialization&lt;/h3&gt;

&lt;p&gt;Initialization theta can’t be set all to 0, otherwise the backpropagation will get all same theta. So theta matrix should be initialize randomly. This is also called Symmetry Breaking.&lt;/p&gt;

&lt;p&gt;One effective strategy for choosing &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{init}&lt;/script&gt; is to base it on the number of units in the network. A good choice of &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{init}&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{init} = \frac{\sqrt6}{\sqrt{L_{in}+L_{out}}}&lt;/script&gt; , where &lt;script type=&quot;math/tex&quot;&gt;L_{in} = s_l&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;L_{out} = s_l+1&lt;/script&gt; are the number of units in the layers adjacent to &lt;script type=&quot;math/tex&quot;&gt;\Theta^{(l)}&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;putting-it-together&quot;&gt;Putting It Together&lt;/h3&gt;

&lt;p&gt;Question: Can we just skip gradient checking?
A: No, we need to check the backpropogation is bug free.&lt;/p&gt;

&lt;p&gt;First, pick a network architecture; choose the layout of your neural network, including how many hidden units in each layer and how many layers in total you want to have.&lt;/p&gt;

&lt;p&gt;Number of input units = dimension of features x(i)&lt;/p&gt;

&lt;p&gt;Number of output units = number of classes&lt;/p&gt;

&lt;p&gt;Number of hidden units per layer = usually more the better (must balance with cost of computation as it increases with more hidden units)&lt;/p&gt;

&lt;p&gt;Defaults: 1 hidden layer. If you have more than 1 hidden layer, then it is recommended that you have the same number of units in every hidden layer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Training a Neural Network&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Randomly initialize the weights&lt;/li&gt;
  &lt;li&gt;Implement forward propagation to get hΘ(x(i)) for any x(i)&lt;/li&gt;
  &lt;li&gt;Implement the cost function&lt;/li&gt;
  &lt;li&gt;Implement backpropagation to compute partial derivatives&lt;/li&gt;
  &lt;li&gt;Use gradient checking to confirm that your backpropagation works. Then disable gradient checking.&lt;/li&gt;
  &lt;li&gt;Use gradient descent or a built-in optimization function to minimize the cost function with the weights in theta.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;application-of-neural-networks&quot;&gt;Application of Neural Networks&lt;/h2&gt;

&lt;h3 id=&quot;autonomous-driving&quot;&gt;Autonomous Driving&lt;/h3&gt;

&lt;h3 id=&quot;programming-assignment&quot;&gt;Programming Assignment&lt;/h3&gt;

&lt;p&gt;Visualizing the hidden layer&lt;/p&gt;

&lt;p&gt;One way to understand what your neural network is learning is to visualize what the representations captured by the hidden units.&lt;/p&gt;

&lt;h1 id=&quot;week-6&quot;&gt;Week 6:&lt;/h1&gt;

&lt;h2 id=&quot;advice-for-applying-machine-learning&quot;&gt;Advice for Applying Machine Learning&lt;/h2&gt;

&lt;h2 id=&quot;evaluating-a-learning-algorithm&quot;&gt;Evaluating a Learning Algorithm&lt;/h2&gt;

&lt;h3 id=&quot;deciding-what-to-try-next&quot;&gt;Deciding What to Try Next&lt;/h3&gt;

&lt;h3 id=&quot;evaluating-a-hypothesis&quot;&gt;Evaluating a Hypothesis&lt;/h3&gt;

&lt;h3 id=&quot;model-selection-and-trainvalidationtest-sets&quot;&gt;Model Selection and Train/Validation/Test Sets&lt;/h3&gt;

&lt;h2 id=&quot;bias-vs-variance&quot;&gt;Bias vs. Variance&lt;/h2&gt;

&lt;h3 id=&quot;diagnosing-bias-vs-variance&quot;&gt;Diagnosing Bias vs. Variance&lt;/h3&gt;

&lt;h3 id=&quot;regularization-and-biasvariance&quot;&gt;Regularization and Bias/Variance&lt;/h3&gt;

&lt;p&gt;In order to choose the model and the regularization term λ, we need to:&lt;/p&gt;

&lt;p&gt;Create a list of lambdas (i.e. λ∈{0,0.01,0.02,0.04,0.08,0.16,0.32,0.64,1.28,2.56,5.12,10.24});
Create a set of models with different degrees or any other variants.
Iterate through the λs and for each λ go through all the models to learn some Θ.
Compute the cross validation error using the learned Θ (computed with λ) on the JCV(Θ) without regularization or λ = 0.
Select the best combo that produces the lowest error on the cross validation set.
Using the best combo Θ and λ, apply it on Jtest(Θ) to see if it has a good generalization of the problem.&lt;/p&gt;

&lt;h3 id=&quot;learning-curves&quot;&gt;Learning Curves&lt;/h3&gt;

&lt;h3 id=&quot;deciding-what-to-do-next-revisited&quot;&gt;Deciding What to do Next Revisited&lt;/h3&gt;

&lt;h2 id=&quot;review&quot;&gt;Review&lt;/h2&gt;

&lt;h3 id=&quot;quiz-advice-for-applying-machine-learning5-questions&quot;&gt;Quiz: Advice for Applying Machine Learning5 questions&lt;/h3&gt;

&lt;h3 id=&quot;programming-assignment-regularized-linear-regression-and-biasvariance3h&quot;&gt;Programming Assignment: Regularized Linear Regression and Bias/Variance3h&lt;/h3&gt;

&lt;h2 id=&quot;machine-learning-system-design&quot;&gt;Machine Learning System Design&lt;/h2&gt;

&lt;h2 id=&quot;building-a-spam-classifier&quot;&gt;Building a Spam Classifier&lt;/h2&gt;

&lt;h3 id=&quot;prioritizing-what-to-work-on&quot;&gt;Prioritizing What to Work On&lt;/h3&gt;

&lt;h3 id=&quot;error-analysis&quot;&gt;Error Analysis&lt;/h3&gt;

&lt;p&gt;Accuracy = (true positives + true negatives) / (total examples)&lt;/p&gt;

&lt;p&gt;Precision = (true positives) / (true positives + false positives)&lt;/p&gt;

&lt;p&gt;Recall = (true positives) / (true positives + false negatives)&lt;/p&gt;

&lt;p&gt;F1 score = (2 * precision * recall) / (precision + recall)&lt;/p&gt;

&lt;h2 id=&quot;handling-skewed-data&quot;&gt;Handling Skewed Data&lt;/h2&gt;

&lt;h3 id=&quot;error-metrics-for-skewed-classes&quot;&gt;Error Metrics for Skewed Classes&lt;/h3&gt;

&lt;h3 id=&quot;trading-off-precision-and-recall&quot;&gt;Trading Off Precision and Recall&lt;/h3&gt;

&lt;h3 id=&quot;using-large-data-sets&quot;&gt;Using Large Data Sets&lt;/h3&gt;

&lt;h3 id=&quot;data-for-machine-learning&quot;&gt;Data For Machine Learning&lt;/h3&gt;

&lt;h2 id=&quot;review-1&quot;&gt;Review&lt;/h2&gt;

&lt;h3 id=&quot;quiz-machine-learning-system-design5-questions&quot;&gt;Quiz: Machine Learning System Design5 questions&lt;/h3&gt;

&lt;p&gt;TODO
https://www.coursera.org/learn/machine-learning/exam/vrjOT/machine-learning-system-design&lt;/p&gt;

&lt;h1 id=&quot;week-7-support-vector-machines&quot;&gt;Week 7: Support Vector Machines&lt;/h1&gt;

&lt;p&gt;Question: What is SVM for?&lt;/p&gt;

&lt;h2 id=&quot;large-margin-classification&quot;&gt;Large Margin Classification&lt;/h2&gt;

&lt;h3 id=&quot;optimization-objective&quot;&gt;Optimization Objective&lt;/h3&gt;

&lt;h3 id=&quot;large-margin-intuition&quot;&gt;Large Margin Intuition&lt;/h3&gt;

&lt;h3 id=&quot;mathematics-behind-large-margin-classification&quot;&gt;Mathematics Behind Large Margin Classification&lt;/h3&gt;

&lt;h2 id=&quot;kernels&quot;&gt;Kernels&lt;/h2&gt;

&lt;p&gt;kernel refers to similarity function.&lt;/p&gt;

&lt;h3 id=&quot;svms-in-practice&quot;&gt;SVMs in Practice&lt;/h3&gt;

&lt;h3 id=&quot;using-an-svm&quot;&gt;Using An SVM&lt;/h3&gt;

&lt;p&gt;Do not perform feature scaling before using the Gaussian kernel.&lt;/p&gt;

&lt;p&gt;Gaussian kernel, linear kernel.&lt;/p&gt;

&lt;h2 id=&quot;review-2&quot;&gt;Review&lt;/h2&gt;

&lt;h3 id=&quot;quiz-support-vector-machines5-questions&quot;&gt;Quiz: Support Vector Machines5 questions&lt;/h3&gt;

&lt;h3 id=&quot;programming-assignment-support-vector-machines&quot;&gt;Programming Assignment: Support Vector Machines&lt;/h3&gt;

&lt;h1 id=&quot;week-8&quot;&gt;Week 8&lt;/h1&gt;

&lt;h2 id=&quot;unsupervised-learning&quot;&gt;Unsupervised Learning&lt;/h2&gt;

&lt;h3 id=&quot;clustering&quot;&gt;Clustering&lt;/h3&gt;

&lt;h4 id=&quot;unsupervised-learning-introduction&quot;&gt;Unsupervised Learning: Introduction&lt;/h4&gt;

&lt;h4 id=&quot;k-means-algorithm&quot;&gt;K-Means Algorithm&lt;/h4&gt;

&lt;h4 id=&quot;optimization-objective-1&quot;&gt;Optimization Objective&lt;/h4&gt;

&lt;h4 id=&quot;random-initialization-1&quot;&gt;Random Initialization&lt;/h4&gt;

&lt;h4 id=&quot;choosing-the-number-of-clusters&quot;&gt;Choosing the Number of Clusters&lt;/h4&gt;
&lt;p&gt;https://www.coursera.org/learn/machine-learning/exam/4sGmv/unsupervised-learning&lt;/p&gt;
&lt;h2 id=&quot;dimensionality-reduction&quot;&gt;Dimensionality Reduction&lt;/h2&gt;

&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;

&lt;h4 id=&quot;motivation-i-data-compression&quot;&gt;Motivation I: Data Compression&lt;/h4&gt;

&lt;h4 id=&quot;motivation-ii-visualization&quot;&gt;Motivation II: Visualization&lt;/h4&gt;

&lt;h3 id=&quot;principal-component-analysis&quot;&gt;Principal Component Analysis&lt;/h3&gt;

&lt;h4 id=&quot;principal-component-analysis-problem-formulation&quot;&gt;Principal Component Analysis Problem Formulation&lt;/h4&gt;

&lt;p&gt;Preprocess is needed: Feature scaling and mean normalization&lt;/p&gt;

&lt;h4 id=&quot;principal-component-analysis-algorithm&quot;&gt;Principal Component Analysis Algorithm&lt;/h4&gt;

&lt;h3 id=&quot;applying-pca&quot;&gt;Applying PCA&lt;/h3&gt;

&lt;h4 id=&quot;reconstruction-from-compressed-representation&quot;&gt;Reconstruction from Compressed Representation&lt;/h4&gt;

&lt;h4 id=&quot;choosing-the-number-of-principal-components&quot;&gt;Choosing the Number of Principal Components&lt;/h4&gt;

&lt;h4 id=&quot;advice-for-applying-pca&quot;&gt;Advice for Applying PCA&lt;/h4&gt;

&lt;h3 id=&quot;review-3&quot;&gt;Review&lt;/h3&gt;

&lt;h4 id=&quot;programming-assignment-k-means-clustering-and-pca&quot;&gt;Programming Assignment: K-Means Clustering and PCA&lt;/h4&gt;

&lt;p&gt;I’m excited about this exercise, about how images’ pixels or other high dimension can be reduced to low dimension, I was shocked when the “eigenfaces” was drawn, look how well it did give the outlines of faces.&lt;/p&gt;

&lt;h1 id=&quot;week-9&quot;&gt;Week 9&lt;/h1&gt;

&lt;h1 id=&quot;anomaly-detection&quot;&gt;Anomaly Detection&lt;/h1&gt;

&lt;h2 id=&quot;density-estimation&quot;&gt;Density Estimation&lt;/h2&gt;

&lt;p&gt;If &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
p(x_i) &lt; \epsilon %]]&gt;&lt;/script&gt;, we say &lt;script type=&quot;math/tex&quot;&gt;x_i&lt;/script&gt; is anomalous. We use Gaussian Distribution to calculate &lt;script type=&quot;math/tex&quot;&gt;p(x_i)&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;problem-motivation&quot;&gt;Problem Motivation&lt;/h3&gt;

&lt;h3 id=&quot;gaussian-distribution&quot;&gt;Gaussian Distribution&lt;/h3&gt;

&lt;h3 id=&quot;algorithm&quot;&gt;Algorithm&lt;/h3&gt;

&lt;h2 id=&quot;building-an-anomaly-detection-system&quot;&gt;Building an Anomaly Detection System&lt;/h2&gt;

&lt;h3 id=&quot;developing-and-evaluating-an-anomaly-detection-system&quot;&gt;Developing and Evaluating an Anomaly Detection System&lt;/h3&gt;

&lt;h3 id=&quot;anomaly-detection-vs-supervised-learning&quot;&gt;Anomaly Detection vs. Supervised Learning&lt;/h3&gt;

&lt;p&gt;What’s difference between Anomaly Detection and Supervised Learning?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Anomaly detection&lt;/th&gt;
      &lt;th&gt;Supervised learning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Very small number of positive examples (y=1). (0-20 is common)&lt;/td&gt;
      &lt;td&gt;Large number of positive and negative examples.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Large number of negative (y=0) examples&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Many different “types” of anomalies. Hard for any algorithm to learn from positive examples what the anomalies look like; future anomalies may look nothing like any of the anomalous examples we’ve seen so far.&lt;/td&gt;
      &lt;td&gt;Enough positive examples for algorithm to get a sense of what positive examples are like, future positive examples likely to be similar to ones in training set.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fraud detection&lt;/td&gt;
      &lt;td&gt;Email spam classification&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Manufacturing (e.g. aircraft engines)&lt;/td&gt;
      &lt;td&gt;Weather prediction (sunny/rainy/etc)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Monitoring machines in a data center&lt;/td&gt;
      &lt;td&gt;Cancer classification&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;choosing-what-features-to-use&quot;&gt;Choosing What Features to Use&lt;/h3&gt;

&lt;h2 id=&quot;multivariate-gaussian-distribution-optional&quot;&gt;Multivariate Gaussian Distribution (Optional)&lt;/h2&gt;

&lt;h3 id=&quot;multivariate-gaussian-distribution&quot;&gt;Multivariate Gaussian Distribution&lt;/h3&gt;

&lt;h3 id=&quot;anomaly-detection-using-the-multivariate-gaussian-distribution&quot;&gt;Anomaly Detection using the Multivariate Gaussian Distribution&lt;/h3&gt;

&lt;h2 id=&quot;recommender-systems&quot;&gt;Recommender Systems&lt;/h2&gt;

&lt;h3 id=&quot;predicting-movie-ratings&quot;&gt;Predicting Movie Ratings&lt;/h3&gt;

&lt;h3 id=&quot;problem-formulation&quot;&gt;Problem Formulation&lt;/h3&gt;

&lt;h3 id=&quot;content-based-recommendations&quot;&gt;Content Based Recommendations&lt;/h3&gt;

&lt;h3 id=&quot;collaborative-filtering&quot;&gt;Collaborative Filtering&lt;/h3&gt;

&lt;h3 id=&quot;collaborative-filtering-1&quot;&gt;Collaborative Filtering&lt;/h3&gt;

&lt;h3 id=&quot;collaborative-filtering-algorithm&quot;&gt;Collaborative Filtering Algorithm&lt;/h3&gt;

&lt;h3 id=&quot;low-rank-matrix-factorization&quot;&gt;Low Rank Matrix Factorization&lt;/h3&gt;

&lt;h3 id=&quot;vectorization-low-rank-matrix-factorization&quot;&gt;Vectorization: Low Rank Matrix Factorization&lt;/h3&gt;

&lt;h3 id=&quot;implementational-detail-mean-normalization&quot;&gt;Implementational Detail: Mean Normalization&lt;/h3&gt;

&lt;h2 id=&quot;review-4&quot;&gt;Review&lt;/h2&gt;

&lt;h3 id=&quot;programming-assignment-anomaly-detection-and-recommender-systems&quot;&gt;Programming Assignment: Anomaly Detection and Recommender Systems&lt;/h3&gt;</content><author><name>Easton Lee</name><email>me@eastonlee.com</email></author><summary type="html"></summary></entry><entry><title type="html">PIP install Advanced Usage</title><link href="http://localhost:4000/blog/2017/03/14/pip-install-advanced-usage/" rel="alternate" type="text/html" title="PIP install Advanced Usage" /><published>2017-03-14T00:00:00-07:00</published><updated>2017-03-14T00:00:00-07:00</updated><id>http://localhost:4000/blog/2017/03/14/pip-install-advanced-usage</id><content type="html" xml:base="http://localhost:4000/blog/2017/03/14/pip-install-advanced-usage/">&lt;h1 id=&quot;no-deps&quot;&gt;–no-deps&lt;/h1&gt;

&lt;p&gt;Only install specified package itself.&lt;/p&gt;

&lt;h1 id=&quot;user&quot;&gt;–user&lt;/h1&gt;

&lt;p&gt;Install to user’s site-packages, on MacOS that’s &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/Library/Python/2.7/lib/python/site-packages&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;install-optioninstall-scriptsusrlocalbin&quot;&gt;–install-option=”–install-scripts=/usr/local/bin”&lt;/h1&gt;

&lt;p&gt;When any install option is specified, wheel(binary package) will be disabled, and setuptools will be used, and the entry point script will be placed to specified place. If not specified, the script will be put at corresponding bin folder, for example, if I specify &lt;code class=&quot;highlighter-rouge&quot;&gt;--prefix&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/foo/Library/Python/2.7/&lt;/code&gt;, the script will be put at &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/foo/Library/Python/2.7/bin/&lt;/code&gt;, by default the script files will be placed under System Python directory’s &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;how-to-use-install-option-meanwhile-wheel&quot;&gt;How to use –install-option meanwhile wheel?&lt;/h1&gt;

&lt;p&gt;Just put options under &lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; section instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; section in &lt;code class=&quot;highlighter-rouge&quot;&gt;pip.conf&lt;/code&gt;, or use them in command line, which will achieve the same result without disabling wheel.&lt;/p&gt;

&lt;h1 id=&quot;whats-difference-between-force-reinstall-and--i-ignore-installed&quot;&gt;What’s difference between –force-reinstall and -I, –ignore-installed?&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-I&lt;/code&gt; will really reinstall all packages forcefully, &lt;code class=&quot;highlighter-rouge&quot;&gt;--force-reinstall&lt;/code&gt; will only take effect with &lt;code class=&quot;highlighter-rouge&quot;&gt;--upgrade&lt;/code&gt; option.&lt;/p&gt;

&lt;h1 id=&quot;-t-target-&quot;&gt;-t, –target &lt;dir&gt;&lt;/dir&gt;&lt;/h1&gt;

&lt;p&gt;Install to non-default location&lt;/p&gt;

&lt;h1 id=&quot;different-between-egg-info-and-dist-info&quot;&gt;Different between egg-info and dist-info.&lt;/h1&gt;

&lt;p&gt;egg-info is generated when using egg (non-binary), dist-info is generated when using wheel or other PEP376-compliant tools.&lt;/p&gt;

&lt;h1 id=&quot;egg-vs-wheel&quot;&gt;Egg vs Wheel&lt;/h1&gt;

&lt;p&gt;https://packaging.python.org/wheel_egg/&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Below is the &lt;code class=&quot;highlighter-rouge&quot;&gt;pip help install&lt;/code&gt; output&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Usage:
  pip install [options] &amp;lt;requirement specifier&amp;gt; [package-index-options] ...
  pip install [options] -r &amp;lt;requirements file&amp;gt; [package-index-options] ...
  pip install [options] [-e] &amp;lt;vcs project url&amp;gt; ...
  pip install [options] [-e] &amp;lt;local project path&amp;gt; ...
  pip install [options] &amp;lt;archive url/path&amp;gt; ...

Description:
  Install packages from:

  - PyPI (and other indexes) using requirement specifiers.
  - VCS project urls.
  - Local project directories.
  - Local or remote source archives.

  pip also supports installing from &quot;requirements files&quot;, which provide
  an easy way to specify a whole environment to be installed.

Install Options:
  -c, --constraint &amp;lt;file&amp;gt;     Constrain versions using the given constraints file. This option can be used multiple times.
  -e, --editable &amp;lt;path/url&amp;gt;   Install a project in editable mode (i.e. setuptools &quot;develop mode&quot;) from a local project path or a VCS
                              url.
  -r, --requirement &amp;lt;file&amp;gt;    Install from the given requirements file. This option can be used multiple times.
  -b, --build &amp;lt;dir&amp;gt;           Directory to unpack packages into and build in.
  -t, --target &amp;lt;dir&amp;gt;          Install packages into &amp;lt;dir&amp;gt;. By default this will not replace existing files/folders in &amp;lt;dir&amp;gt;. Use
                              --upgrade to replace existing packages in &amp;lt;dir&amp;gt; with new versions.
  -d, --download &amp;lt;dir&amp;gt;        Download packages into &amp;lt;dir&amp;gt; instead of installing them, regardless of what's already installed.
  --src &amp;lt;dir&amp;gt;                 Directory to check out editable projects into. The default in a virtualenv is &quot;&amp;lt;venv path&amp;gt;/src&quot;. The
                              default for global installs is &quot;&amp;lt;current dir&amp;gt;/src&quot;.
  -U, --upgrade               Upgrade all specified packages to the newest available version. The handling of dependencies depends on
                              the upgrade-strategy used.
  --upgrade-strategy &amp;lt;upgrade_strategy&amp;gt;
                              Determines how dependency upgrading should be handled. &quot;eager&quot; - dependencies are upgraded regardless of
                              whether the currently installed version satisfies the requirements of the upgraded package(s). &quot;only-if-
                              needed&quot; -  are upgraded only when they do not satisfy the requirements of the upgraded package(s).
  --force-reinstall           When upgrading, reinstall all packages even if they are already up-to-date.
  -I, --ignore-installed      Ignore the installed packages (reinstalling instead).
  --ignore-requires-python    Ignore the Requires-Python information.
  --no-deps                   Don't install package dependencies.
  --install-option &amp;lt;options&amp;gt;  Extra arguments to be supplied to the setup.py install command (use like --install-option=&quot;--install-
                              scripts=/usr/local/bin&quot;). Use multiple --install-option options to pass multiple options to setup.py
                              install. If you are using an option with a directory path, be sure to use absolute path.
  --global-option &amp;lt;options&amp;gt;   Extra global options to be supplied to the setup.py call before the install command.
  --user                      Install to the Python user install directory for your platform. Typically ~/.local/, or %APPDATA%\Python
                              on Windows. (See the Python documentation for site.USER_BASE for full details.)
  --egg                       Install packages as eggs, not 'flat', like pip normally does. This option is not about installing *from*
                              eggs. (WARNING: Because this option overrides pip's normal install logic, requirements files may not
                              behave as expected.)
  --root &amp;lt;dir&amp;gt;                Install everything relative to this alternate root directory.
  --prefix &amp;lt;dir&amp;gt;              Installation prefix where lib, bin and other top-level folders are placed
  --compile                   Compile py files to pyc
  --no-compile                Do not compile py files to pyc
  --no-use-wheel              Do not Find and prefer wheel archives when searching indexes and find-links locations. DEPRECATED in
                              favour of --no-binary.
  --no-binary &amp;lt;format_control&amp;gt;
                              Do not use binary packages. Can be supplied multiple times, and each time adds to the existing value.
                              Accepts either :all: to disable all binary packages, :none: to empty the set, or one or more package
                              names with commas between them. Note that some packages are tricky to compile and may fail to install
                              when this option is used on them.
  --only-binary &amp;lt;format_control&amp;gt;
                              Do not use source packages. Can be supplied multiple times, and each time adds to the existing value.
                              Accepts either :all: to disable all source packages, :none: to empty the set, or one or more package
                              names with commas between them. Packages without binary distributions will fail to install when this
                              option is used on them.
  --pre                       Include pre-release and development versions. By default, pip only finds stable versions.
  --no-clean                  Don't clean up build directories.
  --require-hashes            Require a hash to check each requirement against, for repeatable installs. This option is implied when
                              any package in a requirements file has a --hash option.

Package Index Options (including deprecated options):
  -i, --index-url &amp;lt;url&amp;gt;       Base URL of Python Package Index (default https://pypi.python.org/simple). This should point to a
                              repository compliant with PEP 503 (the simple repository API) or a local directory laid out in the same
                              format.
  --extra-index-url &amp;lt;url&amp;gt;     Extra URLs of package indexes to use in addition to --index-url. Should follow the same rules as --index-
                              url.
  --no-index                  Ignore package index (only looking at --find-links URLs instead).
  -f, --find-links &amp;lt;url&amp;gt;      If a url or path to an html file, then parse for links to archives. If a local path or file:// url that's
                              a directory, then look for archives in the directory listing.
  --process-dependency-links  Enable the processing of dependency links.

General Options:
  -h, --help                  Show help.
  --isolated                  Run pip in an isolated mode, ignoring environment variables and user configuration.
  -v, --verbose               Give more output. Option is additive, and can be used up to 3 times.
  -V, --version               Show version and exit.
  -q, --quiet                 Give less output. Option is additive, and can be used up to 3 times (corresponding to WARNING, ERROR, and
                              CRITICAL logging levels).
  --log &amp;lt;path&amp;gt;                Path to a verbose appending log.
  --proxy &amp;lt;proxy&amp;gt;             Specify a proxy in the form [user:passwd@]proxy.server:port.
  --retries &amp;lt;retries&amp;gt;         Maximum number of retries each connection should attempt (default 5 times).
  --timeout &amp;lt;sec&amp;gt;             Set the socket timeout (default 15 seconds).
  --exists-action &amp;lt;action&amp;gt;    Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort.
  --trusted-host &amp;lt;hostname&amp;gt;   Mark this host as trusted, even though it does not have valid or any HTTPS.
  --cert &amp;lt;path&amp;gt;               Path to alternate CA bundle.
  --client-cert &amp;lt;path&amp;gt;        Path to SSL client certificate, a single file containing the private key and the certificate in PEM
                              format.
  --cache-dir &amp;lt;dir&amp;gt;           Store the cache data in &amp;lt;dir&amp;gt;.
  --no-cache-dir              Disable the cache.
  --disable-pip-version-check
                              Don't periodically check PyPI to determine whether a new version of pip is available for download.
                              Implied with --no-index.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Easton Lee</name><email>me@eastonlee.com</email></author><summary type="html">–no-deps</summary></entry><entry><title type="html">Make Sublime Text LaTex Completion Work with Markdown</title><link href="http://localhost:4000/blog/2017/03/14/make-sublime-text-latex-completion-work-with-markdown/" rel="alternate" type="text/html" title="Make Sublime Text LaTex Completion Work with Markdown" /><published>2017-03-14T00:00:00-07:00</published><updated>2017-03-14T00:00:00-07:00</updated><id>http://localhost:4000/blog/2017/03/14/make-sublime-text-latex-completion-work-with-markdown</id><content type="html" xml:base="http://localhost:4000/blog/2017/03/14/make-sublime-text-latex-completion-work-with-markdown/">&lt;p&gt;When I use Sublime Text to edit Markdown files, I appreciate the Syntax Highlight provided by &lt;em&gt;Markdown Light&lt;/em&gt; plugin, but just like built-in and other Markdown plugins, they can’t provide auto completion for embedded LaTex statements in Markdown files. But it’s very common nowadays to mix various branches of Markdown with LaTex-like math equations, it will ease my pain if I can expect LaTex auto completion when editing Markdown files.&lt;/p&gt;

&lt;p&gt;Here is the simple solution:&lt;/p&gt;

&lt;p&gt;1 Install &lt;code class=&quot;highlighter-rouge&quot;&gt;LaTexBox&lt;/code&gt; plugin, which gives us LaTex auto completion.&lt;/p&gt;

&lt;p&gt;2 Modify &lt;code class=&quot;highlighter-rouge&quot;&gt;/Packages/LaTeXBox/auto_complete.py&lt;/code&gt;, like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Line 18
# Before
def on_query_completions(self, view, prefix, locations):
    if not view.match_selector(locations[0], &quot;text.tex.latex&quot;):
        return None
# After
def on_query_completions(self, view, prefix, locations):
    if not ( view.match_selector(locations[0], &quot;text.tex.latex&quot;) or view.match_selector(locations[0], &quot;text.html.markdown&quot;)):
        return None
# Line 38
# Before
if view.match_selector(locations[0], &quot;meta.environment.math&quot;):
    r = r + math_commands
# After
if view.match_selector(locations[0], &quot;meta.environment.math&quot;) or \
    view.match_selector(locations[0], &quot;text.html.markdown&quot;):
    r = r + math_commands
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;p&gt;These two modifications expand the processing scope from &lt;code class=&quot;highlighter-rouge&quot;&gt;tex&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;tex&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown&lt;/code&gt;, and guarantee LaTex syntax will also get auto completion in Markdown files.&lt;/p&gt;

&lt;p&gt;Using similar method, you can mix auto completion of any multiple syntaxes. (Caveat: you can’t mix Syntax Highlight in this way)&lt;/p&gt;</content><author><name>Easton Lee</name><email>me@eastonlee.com</email></author><summary type="html">When I use Sublime Text to edit Markdown files, I appreciate the Syntax Highlight provided by Markdown Light plugin, but just like built-in and other Markdown plugins, they can’t provide auto completion for embedded LaTex statements in Markdown files. But it’s very common nowadays to mix various branches of Markdown with LaTex-like math equations, it will ease my pain if I can expect LaTex auto completion when editing Markdown files.</summary></entry><entry><title type="html">Brief Octave Cheat Sheet for Coursera Machine Learning Course by Stanford University</title><link href="http://localhost:4000/blog/2017/03/14/brief-octave-cheat-sheet-for-coursera-machine-learning-course-by-stanford-university/" rel="alternate" type="text/html" title="Brief Octave Cheat Sheet for Coursera Machine Learning Course by Stanford University" /><published>2017-03-14T00:00:00-07:00</published><updated>2017-03-14T00:00:00-07:00</updated><id>http://localhost:4000/blog/2017/03/14/brief-octave-cheat-sheet-for-coursera-machine-learning-course-by-stanford-university</id><content type="html" xml:base="http://localhost:4000/blog/2017/03/14/brief-octave-cheat-sheet-for-coursera-machine-learning-course-by-stanford-university/">&lt;p&gt;I use R with Python a lot, Octave is the chosen language in Coursera course: Machine Learning by Stanford University.&lt;/p&gt;

&lt;p&gt;So this article will only cover necessary concept to finish Machine Learning course.&lt;/p&gt;

&lt;h1 id=&quot;index&quot;&gt;Index&lt;/h1&gt;

&lt;p&gt;In Octave, matrix and vector are indexed from 1, which differs from many other languages.&lt;/p&gt;

&lt;h1 id=&quot;output&quot;&gt;Output&lt;/h1&gt;

&lt;p&gt;One line not ending with a semicolon will print the result to output, with semicolon with suppress that output.&lt;/p&gt;

&lt;p&gt;Or use &lt;code class=&quot;highlighter-rouge&quot;&gt;disp(i);&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf(i)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;string&quot;&gt;String&lt;/h1&gt;

&lt;h2 id=&quot;compare&quot;&gt;Compare&lt;/h2&gt;
&lt;p&gt;strcmp, strmatch&lt;/p&gt;

&lt;h1 id=&quot;cell-array&quot;&gt;Cell-array&lt;/h1&gt;

&lt;h2 id=&quot;acess&quot;&gt;Acess&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ca = cell(2,1); % create cell array
ca{1} = 'abc'; % assign to first element
ca{2} = 'def'; % assign to second element
ca{1}; % access first element
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;range&quot;&gt;Range&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1:10&lt;/code&gt; will create a 1x10 matrix or say 10-element vector with numbers from 1 to 10. &lt;code class=&quot;highlighter-rouge&quot;&gt;1:2:10&lt;/code&gt; will create vector with each other numbers from 1 to 10, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;[1 3 5 7 9]&lt;/code&gt;. The middle 2 is the specified step.&lt;/p&gt;

&lt;h1 id=&quot;matrix-vector&quot;&gt;Matrix, Vector&lt;/h1&gt;

&lt;h2 id=&quot;assignment&quot;&gt;Assignment&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% assign a matrix to A: 
A = [1 2; 3 4; 5 6]
A =
    1   2
    3   4
    5   6

% assign to second column
&amp;gt;&amp;gt; A(:,2) = [10 11 12]
% space, comma or semicolon doesn't matter here
&amp;gt;&amp;gt; A(:,2) = [10, 11, 12]
&amp;gt;&amp;gt; A(:,2) = [10; 11; 12]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;access&quot;&gt;Access&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% access A at first row and second column.
&amp;gt;&amp;gt; A(1,2)
ans = 2

% access second row, here colon refers to all columns
&amp;gt;&amp;gt; A(2,:)
ans =
    3   4

% access second column
&amp;gt;&amp;gt; A(:,2)
ans =
    2
    4
    6

a(2)       # result is a scalar
a(1:2)     # result is a row vector
a([1; 2])  # result is a column vector

a = [1, 2; 3, 4]
all of the following expressions are equivalent and select the first row of the matrix.

a(1, [1, 2])  # row 1, columns 1 and 2
a(1, 1:2)     # row 1, columns in range 1-2
a(1, :)       # row 1, all columns

a(1:end/2)        # first half of a =&amp;gt; [1, 2]
a(end + 1) = 5;   # append element
a(end) = [];      # delete element
a(1:2:end)        # odd elements of a =&amp;gt; [1, 3]
a(2:2:end)        # even elements of a =&amp;gt; [2, 4]
a(end:-1:1)       # reversal of a =&amp;gt; [4, 3, 2 , 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;fill&quot;&gt;Fill&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; A = ones(2, 3) # ones or zeros
A =
   1   1   1
   1   1   1

&amp;gt;&amp;gt; rand(2, 3)
ans =
   0.47210   0.10022   0.35182
   0.69316   0.71345   0.71179
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;concatenate&quot;&gt;Concatenate&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; B = [20 21; 22 23; 24 25]
&amp;gt;&amp;gt; C = [A B] % concatenate A B horizontally
ans =
    1   2   20   21
    3   4   22   23
    5   6   24   25

&amp;gt;&amp;gt; D = [A; B] % concatenate A B vertically
ans =
    1   2
    3   4
    5   6
    20  21
    22  23
    24  25
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;transpose&quot;&gt;Transpose&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; A' % transpose
ans =
    1   3   5
    2   4   6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;max-min&quot;&gt;Max, Min&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; max(magic(4)) % return every column's max
ans =
    16  14  15  13

&amp;gt;&amp;gt; max(magic(4), [], 2) % return every row's max
ans =
   16
   11
   12
   15

&amp;gt;&amp;gt; [val, ind] = max(magic(4)) % retuns every column's max and their index in corresponding column
val =
    16  14  15  13
ind =
    1   4   4   1

&amp;gt;&amp;gt; max(max(A)); % max element in matrix
&amp;gt;&amp;gt; A(:) % convert matrix into one column
ans =
    1
    3
    5
    2
    4
    6
&amp;gt;&amp;gt; max(A(:)) % max element in matrix
ans =
    6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sum&quot;&gt;Sum&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; sum(A) % sum of column
&amp;gt;&amp;gt; sum(A, 2) % sum of row
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;sum-of-diagonals-in-a-square-matrix&quot;&gt;Sum of diagonals in a square matrix&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; M = magic(4);
&amp;gt;&amp;gt; sum(sum(M.*eye(4))) % sum of diagonal top left to bottom right
ans = 34
&amp;gt;&amp;gt; sum(sum(M.* flipud(eye(4) ))) % sum of diagonal bottom left to top right
ans = 34
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;flip&quot;&gt;Flip&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; flipud(A) $ flip matrix upside down
ans =
    5   6
    3   4
    1   2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;matrix-select&quot;&gt;Matrix select&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A(A==2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;reshape&quot;&gt;Reshape&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; reshape(A, 2, 3)
ans =
   1   5   4
   3   2   6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;functions--control-statements&quot;&gt;Functions &amp;amp; control statements&lt;/h1&gt;

&lt;p&gt;Functions are saved in files with the file-ending .m for MATLAB.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function y = function_name(x1, ...
    x2) % x2 is optional
    if ~exist('x2', 'var') || isempty(x2)
        x2 = 1;
    end        
    y = x1 + x2;
% y is the return value
% x1 is a parameter
% is also possible to return multiple values
function [y1, y2] = function_name(x1)
    y1 = x1^2
    y2 = x1^3

&amp;gt;&amp;gt; for i=1:10
&amp;gt;&amp;gt;      disp(i)
&amp;gt;&amp;gt; end;

&amp;gt;&amp;gt; i = 1;
&amp;gt;&amp;gt; while (i ~= 10)
&amp;gt;&amp;gt;      disp(i);
&amp;gt;&amp;gt;      i = i+1;
&amp;gt;&amp;gt; endwhile;

% i = 10
&amp;gt;&amp;gt; if (i == 10)
&amp;gt;&amp;gt;      sprintf('yes')
&amp;gt;&amp;gt; else
&amp;gt;&amp;gt;      sprintf('no')
&amp;gt;&amp;gt; endif
ans = yes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;anonymous-function&quot;&gt;Anonymous function&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@(x1, x2) another_func(x1, x2) % anonymous function, just like Python lambda
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;logic-operations&quot;&gt;Logic operations&lt;/h1&gt;

&lt;p&gt;not equal ~=&lt;/p&gt;

&lt;p&gt;logical AND &amp;amp;&amp;amp;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;logical OR&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;logical XOR xor(1,0)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;https://gist.github.com/obstschale/7320846&lt;/p&gt;

&lt;p&gt;http://folk.ntnu.no/joern/itgk/refcard-a4.pdf&lt;/p&gt;</content><author><name>Easton Lee</name><email>me@eastonlee.com</email></author><summary type="html">I use R with Python a lot, Octave is the chosen language in Coursera course: Machine Learning by Stanford University.</summary></entry><entry><title type="html">Linux Init Systems Cheat Sheet</title><link href="http://localhost:4000/blog/2017/03/09/linux-init-systems-cheat-sheet/" rel="alternate" type="text/html" title="Linux Init Systems Cheat Sheet" /><published>2017-03-09T00:00:00-08:00</published><updated>2017-03-09T00:00:00-08:00</updated><id>http://localhost:4000/blog/2017/03/09/linux-init-systems-cheat-sheet</id><content type="html" xml:base="http://localhost:4000/blog/2017/03/09/linux-init-systems-cheat-sheet/">&lt;p&gt;Easy way to tell which Init System you are using? And how to manipulate services in different Init System.&lt;/p&gt;

&lt;h1 id=&quot;tell-the-difference-of-init-systems&quot;&gt;Tell the difference of Init Systems&lt;/h1&gt;

&lt;p&gt;systemd, SysVinit, Upstart, Supervisor&lt;/p&gt;

&lt;p&gt;You must have heard these terms and known their job is “start other process”, but given a Linux system, can you tell which Init System it is using? And how to stop or disable service?&lt;/p&gt;

&lt;p&gt;init is the first process run on Linux so it has pid=1. init keeps running as long as the system does. All other processes is started by init.&lt;/p&gt;

&lt;p&gt;Earlier Linux distributions employed various Init System, but most latest distributions move to systemd.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;init&lt;/th&gt;
      &lt;th&gt;platfor&lt;/th&gt;
      &lt;th&gt;controller&lt;/th&gt;
      &lt;th&gt;directory&lt;/th&gt;
      &lt;th&gt;note&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;systemd&lt;/td&gt;
      &lt;td&gt;Red Hat family, Debian &amp;gt;= 8, Ubuntu &amp;gt;= 15.4&lt;/td&gt;
      &lt;td&gt;systemctl&lt;/td&gt;
      &lt;td&gt;/etc/systemd/system/, /run/systemd/system/, /run/systemd/generator.late/, /usr/local/lib/systemd/system/, /usr/lib/systemd/system/&lt;/td&gt;
      &lt;td&gt;compatible with SysVinit by systemd-sysv-generator, doesn’t honor priorities by /etc/rc?.d/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SysVinit&lt;/td&gt;
      &lt;td&gt;earlier Linux&lt;/td&gt;
      &lt;td&gt;service&lt;/td&gt;
      &lt;td&gt;/etc/rc/, /etc/init.d/&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Upstart&lt;/td&gt;
      &lt;td&gt;Ubuntu &amp;lt; 15.4&lt;/td&gt;
      &lt;td&gt;start, stop, restart, status&lt;/td&gt;
      &lt;td&gt;/etc/init/&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;how-to-manipulate-services&quot;&gt;How to manipulate services?&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;init&lt;/th&gt;
      &lt;th&gt;create&lt;/th&gt;
      &lt;th&gt;remove&lt;/th&gt;
      &lt;th&gt;start&lt;/th&gt;
      &lt;th&gt;stop&lt;/th&gt;
      &lt;th&gt;enable&lt;/th&gt;
      &lt;th&gt;disable&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;systemd&lt;/td&gt;
      &lt;td&gt;create unit_name.type_extension in /etc/systemd/system/&lt;/td&gt;
      &lt;td&gt;rm /etc/systemd/system/unit_name.type_extension; systemctl daemon-reload; systemctl reset-failed&lt;/td&gt;
      &lt;td&gt;systemctl start foo&lt;/td&gt;
      &lt;td&gt;systemctl stop foo&lt;/td&gt;
      &lt;td&gt;systemctl enable foo&lt;/td&gt;
      &lt;td&gt;systemctl disable foo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SysVinit&lt;/td&gt;
      &lt;td&gt;create scripts in /etc/init.d, then run update-rc.d or chkconfig&lt;/td&gt;
      &lt;td&gt;mv /etc/init.d/foo.conf /etc/init/foo.conf.disabled&lt;/td&gt;
      &lt;td&gt;service foo start&lt;/td&gt;
      &lt;td&gt;service foo stop&lt;/td&gt;
      &lt;td&gt;update-rc.d foo enable&lt;/td&gt;
      &lt;td&gt;update-rc.d foo disable&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Upstart&lt;/td&gt;
      &lt;td&gt;create /etc/init/foo.conf&lt;/td&gt;
      &lt;td&gt;mv /etc/init/foo.conf /etc/init/foo.conf.disabled&lt;/td&gt;
      &lt;td&gt;service foo start&lt;/td&gt;
      &lt;td&gt;service foo stop&lt;/td&gt;
      &lt;td&gt;rm /etc/init/foo.override&lt;/td&gt;
      &lt;td&gt;echo ‘manual’ | sudo tee /etc/init/foo.override&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;systemctl daemon-reload; systemctl reset-failed&lt;/p&gt;

&lt;h1 id=&quot;supervisor-looks-simple-can-it-replace-other-init-system&quot;&gt;Supervisor looks simple, can it replace other Init System?&lt;/h1&gt;

&lt;p&gt;Brief answer: NO. Supervisor’s biggest advance is its convenience, but it just covers a subset features which can be done better by like systemd or SystemVinit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;https://unix.stackexchange.com/questions/233468/how-does-systemd-use-etc-init-d-scripts
https://www.turnkeylinux.org/blog/debugging-systemd-sysv-init-compat
http://linoxide.com/linux-command/systemd-vs-sysvinit-cheatsheet/
http://www.tecmint.com/systemd-replaces-init-in-linux/
http://www.pcworld.com/article/2841873/meet-systemd-the-controversial-project-taking-over-a-linux-distro-near-you.html
http://www.tecmint.com/best-linux-init-systems/
https://askubuntu.com/questions/19320/how-to-enable-or-disable-services
https://fedoraproject.org/wiki/SysVinit_to_Systemd_Cheatsheet&lt;/p&gt;</content><author><name>Easton Lee</name><email>me@eastonlee.com</email></author><summary type="html">Easy way to tell which Init System you are using? And how to manipulate services in different Init System.</summary></entry><entry><title type="html">Common Python Operation Time Complexity</title><link href="http://localhost:4000/blog/2017/03/05/common-python-operation-time-complexity/" rel="alternate" type="text/html" title="Common Python Operation Time Complexity" /><published>2017-03-05T00:00:00-08:00</published><updated>2017-03-05T00:00:00-08:00</updated><id>http://localhost:4000/blog/2017/03/05/common-python-operation-time-complexity</id><content type="html" xml:base="http://localhost:4000/blog/2017/03/05/common-python-operation-time-complexity/">&lt;p&gt;Python enable us to perform advanced operation in very expressive way, meanwhile covers many users’ eyes from underlying implement details. If the performance of your application plays a critical role, please always keep in mind the time complexity of these common operations.&lt;/p&gt;

&lt;p&gt;The following table is an important cheat sheet to memorize to keep your applications behave.
&lt;a href=&quot;https://wiki.python.org/moin/TimeComplexity&quot;&gt;Python official page&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;list&quot;&gt;List&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operation&lt;/th&gt;
      &lt;th&gt;Average Case&lt;/th&gt;
      &lt;th&gt;Amortized Worst Case&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Copy&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Append&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Insert&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Get Item&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Set Item&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Delete Item&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Iteration&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Get Slice&lt;/td&gt;
      &lt;td&gt;O(k)&lt;/td&gt;
      &lt;td&gt;O(k)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Del Slice&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Set Slice&lt;/td&gt;
      &lt;td&gt;O(k+n)&lt;/td&gt;
      &lt;td&gt;O(k+n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Extend&lt;/td&gt;
      &lt;td&gt;O(k)&lt;/td&gt;
      &lt;td&gt;O(k)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sort&lt;/td&gt;
      &lt;td&gt;O(n log n)&lt;/td&gt;
      &lt;td&gt;O(n log n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Multiply&lt;/td&gt;
      &lt;td&gt;O(nk)&lt;/td&gt;
      &lt;td&gt;O(nk)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x in s&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;min(s), max(s)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Get Length&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;collectionsdeque&quot;&gt;collections.deque&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operation&lt;/th&gt;
      &lt;th&gt;Average Case&lt;/th&gt;
      &lt;th&gt;Amortized Worst Case&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Copy&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;append&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;appendleft&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pop&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;popleft&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;extend&lt;/td&gt;
      &lt;td&gt;O(k)&lt;/td&gt;
      &lt;td&gt;O(k)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;extendleft&lt;/td&gt;
      &lt;td&gt;O(k)&lt;/td&gt;
      &lt;td&gt;O(k)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rotate&lt;/td&gt;
      &lt;td&gt;O(k)&lt;/td&gt;
      &lt;td&gt;O(k)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;remove&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;set&quot;&gt;set&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operation&lt;/th&gt;
      &lt;th&gt;Average case&lt;/th&gt;
      &lt;th&gt;Worst Case&lt;/th&gt;
      &lt;th&gt;notes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;x in s&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Union s&lt;/td&gt;
      &lt;td&gt;t&lt;/td&gt;
      &lt;td&gt;O(len(s)+len(t))&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Intersection s&amp;amp;t&lt;/td&gt;
      &lt;td&gt;O(min(len(s), len(t))&lt;/td&gt;
      &lt;td&gt;O(len(s) * len(t))&lt;/td&gt;
      &lt;td&gt;replace “min” with “max” if t is not a set&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Multiple intersection s1&amp;amp;s2&amp;amp;..&amp;amp;sn&lt;/td&gt;
      &lt;td&gt;(n-1)*O(l) where l is max(len(s1),..,len(sn))&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Difference s-t&lt;/td&gt;
      &lt;td&gt;O(len(s))&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s.difference_&lt;/td&gt;
      &lt;td&gt;update(t)&lt;/td&gt;
      &lt;td&gt;O(len(t))&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Symmetric Difference s^t&lt;/td&gt;
      &lt;td&gt;O(len(s))&lt;/td&gt;
      &lt;td&gt;O(len(s) * len(t))&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;s.symmetric_difference_update(t)&lt;/td&gt;
      &lt;td&gt;O(len(t))&lt;/td&gt;
      &lt;td&gt;O(len(t) * len(s))&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;dict&quot;&gt;dict&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operation&lt;/th&gt;
      &lt;th&gt;Average Case&lt;/th&gt;
      &lt;th&gt;Amortized Worst Case&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Copy&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Get Item&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Set Item&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Delete Item&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Iteration&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
      &lt;td&gt;O(n)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Easton Lee</name><email>me@eastonlee.com</email></author><summary type="html">Python enable us to perform advanced operation in very expressive way, meanwhile covers many users’ eyes from underlying implement details. If the performance of your application plays a critical role, please always keep in mind the time complexity of these common operations.</summary></entry><entry><title type="html">Data Manipulation at Scale: Systems and Algorithms</title><link href="http://localhost:4000/blog/2017/03/02/data-manipulation-at-scale-systems-and-algorithms/" rel="alternate" type="text/html" title="Data Manipulation at Scale: Systems and Algorithms" /><published>2017-03-02T00:00:00-08:00</published><updated>2017-03-02T00:00:00-08:00</updated><id>http://localhost:4000/blog/2017/03/02/data-manipulation-at-scale-systems-and-algorithms</id><content type="html" xml:base="http://localhost:4000/blog/2017/03/02/data-manipulation-at-scale-systems-and-algorithms/">&lt;p&gt;I’ve finished a Data Science course on Coursera recently, &lt;em&gt;Data Manipulation at Scale: Systems and Algorithms&lt;/em&gt;, which is taught by  Bill Howe.&lt;/p&gt;

&lt;p&gt;Some parts of the course aren’t new for me, but this is a good course on the whole. Many thanks to Mr Howe for passing his comprehensive knowledge on the large scale data manipulation and analysis.&lt;/p&gt;

&lt;p&gt;I’ve really learned something amazing from it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Do matrix multiplication in relational database. I’ve never thought of things like that, but it turns out to be doable.&lt;/li&gt;
  &lt;li&gt;Matrix multiply in MapReduce. Another matrix multiplication, but in a very tricky MapReduce way, very interesting.&lt;/li&gt;
  &lt;li&gt;Consistency Hashing. Every developer should know it if you don’t want to be fired.&lt;/li&gt;
  &lt;li&gt;Pattern Matching. I was impressed by the PRISM program example where NSA can use Datalog-like query to perform pattern search for potential bad person.&lt;/li&gt;
  &lt;li&gt;Many many industrial products and examples. I bet Bill has an informative chronicle of database family in mind, he spent plenty of time introducing databases one by one, some of which I don’t even know exist, really eyeopener.&lt;/li&gt;
  &lt;li&gt;Interesting assignments. For example, one assignment is to analyze sentiment of Twitter stream, and find out which state of US is happiest, another is to write MapReduce programs to “find asymmetric friendships” and “do join like relational database”. But I wish there was some more challenging assignments.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Easton Lee</name><email>me@eastonlee.com</email></author><summary type="html">I’ve finished a Data Science course on Coursera recently, Data Manipulation at Scale: Systems and Algorithms, which is taught by Bill Howe.</summary></entry><entry><title type="html">Interactively run Python projects in Sublime Text, using handy SublimeREPL</title><link href="http://localhost:4000/blog/2017/02/28/interactively-run-python-projects-in-sublime-text-using-handy-sublimerepl/" rel="alternate" type="text/html" title="Interactively run Python projects in Sublime Text, using handy SublimeREPL" /><published>2017-02-28T00:00:00-08:00</published><updated>2017-02-28T00:00:00-08:00</updated><id>http://localhost:4000/blog/2017/02/28/interactively-run-python-projects-in-sublime-text-using-handy-sublimerepl</id><content type="html" xml:base="http://localhost:4000/blog/2017/02/28/interactively-run-python-projects-in-sublime-text-using-handy-sublimerepl/">&lt;p&gt;Sublime Text rocks, but can you run Python projects interactively when using Build System?&lt;/p&gt;

&lt;p&gt;Sublime Text is super editor, it’s fast, pretty and extensible, so I use it a lot to edit any possible text files, and develop Python projects. Vim, Emacs and PyCharm are also cool, but Vim is “evil”, Emacs is too “guru”, Pycharm is so slow, I decide to bury them and move to Sublime Text.&lt;/p&gt;

&lt;p&gt;In fact I’ve used Sublime Text for many years mainly as an ad-hoc and rich featured text editor, I never touched its plugins because I had powerful IDEs like PyCharm. But PyCharm is so bloated and takes too much resources including CPU, RAM and disk, let alone its start time.&lt;/p&gt;

&lt;p&gt;Sublime Text avoids all those weaknesses and is equally powerful, but it does have some flaws. When you want to run your Python scripts or a whole project, you may need Sublime’s Build System. The Build System invokes external compiler, interpreter or project management system to run the build task, and displays the result in its result panel, however the result panel can only give running result but not take user input, which is ridiculous. You may wonder whether input is so important, my answer is yes, especially when it comes to pdb (The Python Debugger).&lt;/p&gt;

&lt;p&gt;How to hack this &lt;em&gt;**&lt;/em&gt;? Well, you can try SublimeREPL. SublimeREPL provides REPL interpreter in Sublime Text view for many languages, so you can run current Python file interactively. But that’s all it can give, every time you run a file a new tab is opened and code tab is overlaid, of course now you get REPL, but that’s still not cool, I also want to see source code. Calm down, Sublime Text plugins can sort things out, if they can’t, we write a new plugin.&lt;/p&gt;

&lt;p&gt;Let’s make things clear:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I want SublimeREPL to take place of built-in Build System to run Python files.&lt;/li&gt;
  &lt;li&gt;I want SublimeREPL to display in a new view, instead of the same view with source code.
2.1. I need a plugin that is good at Sublime Text layout to split one window into two groups.
2.1.1 When only one Sublime Text group exists, create new one, then move REPL view into new group.
2.1.2 When there are two or more groups, just move the REPL tab to the next one.
2.1.3 When the new group contains only REPL tab, and you close that tab, the group should be destroyed too.&lt;/li&gt;
  &lt;li&gt;If built-in Build System is able to invoke SublimeREPL and layout plugin, that will be good. Otherwise we have to write our own plugin to invoke Build System then layout plugin.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Problem 1 is easy to solve. First, create a new Build System, configurate it like this, then save it with extension “sublime-build”, then you can find this new Build System in top menu.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;run_existing_window_command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;repl_python_run&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;selector&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;source.python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;config/Python/Main.sublime-menu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then the new Build System will call REPL command.
&lt;img src=&quot;http://7u2owr.com1.z0.glb.clouddn.com/repl_in_same_group.gif&quot; alt=&quot;&quot; /&gt;
Problem 2, the vanilla Sublime Text layout is useful but far from handy, so you need to install enhanced layout plugin – &lt;a href=&quot;https://github.com/SublimeText/Origami&quot;&gt;Origami&lt;/a&gt;, BTW Origami calls group as pane, you just need to know they are the same thing. Look at what features Origami brings: 1) save and restore layouts, 2) shortcut to resize groups, 3) auto close empty group, 4) create new group if necessary. I love it, these features will make the entire Sublime Text layout more organizable, and problem 2 is no longer pain. Detailed config and code will be seen bellow.&lt;/p&gt;

&lt;p&gt;Problem 3 is a little tricky, I tried to custom the Build System (above mentioned sublime-build file), but if I replace the target field with my own plugin command, how should I deal with the other fields like “id”, “selector” and “file”? I read SublimeREPL’s code, these fields are necessary but I’m not familiar with how Build System passes these to SublimeREPL, so a more plausible way is to write a new plugin, which we let call build command and layout command (most functions of Sublime Text and its plugins are implemented and encapsulated in commands, press CTRL+` and try them in console).&lt;/p&gt;

&lt;p&gt;Now we need to write a Sublime Text plugin to chain all things up. That’s not very hard, here are &lt;a href=&quot;http://docs.sublimetext.info/en/latest/extensibility/plugins.html&quot;&gt;some document&lt;/a&gt; to begin with. Some important concept includes &lt;em&gt;Conventions for Command Names, Window Commands and Text Commands&lt;/em&gt;, notice the name you define a command class is different from the name you call, and the command file’s name doesn’t matter (a poor .py file), don’t mess up. Below is my command file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import sublime
import sublime_plugin


class RunPythonReplCommand(sublime_plugin.TextCommand): 
    def run(self, edit):
        view = self.view
        view.window().run_command('build')
        # segment 1 and 2 are equivalent but segment 1 changes original view's focus
        # after moving repl to new group
        # segment 1
        # view.window().run_command('carry_file_to_pane', {&quot;direction&quot;: &quot;right&quot;})
        # segment 2
        view.window().run_command('travel_to_pane', {&quot;direction&quot;: &quot;right&quot;})
        view.window().run_command('travel_to_pane', {&quot;direction&quot;: &quot;left&quot;})
        view.window().run_command('move_to_neighboring_group')
        view.window().run_command('zoom_pane', {&quot;fraction&quot;: 0.5})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First we need to specify our newly created Build System in Sublime Text’s top menu, then when we call &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; command, it will invoke SublimeREPL, a new tab will appear on the right hand side of source code view. The commands &lt;code class=&quot;highlighter-rouge&quot;&gt;travel_to_pane, travel_to_pane, zoom_pane&lt;/code&gt; are provided by Origami, &lt;code class=&quot;highlighter-rouge&quot;&gt;move_to_neighboring_group&lt;/code&gt; is built-in. After SublimeREPL tab appears, Origami will try to visit right side’s group, if no group is there, Origami will create one, then Origami move focus back, then we move the SublimeREPL tab to the right group, and I specify the right group take 50% width, you can change as you need.&lt;/p&gt;

&lt;p&gt;Finally we tame Sublime Text even better. Now you can bind the new command to a keyboard shortcut, and watch Sublime Text dance like a charm.
&lt;img src=&quot;http://7u2owr.com1.z0.glb.clouddn.com/repl_in_new_group.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Easton Lee</name><email>me@eastonlee.com</email></author><summary type="html">Sublime Text rocks, but can you run Python projects interactively when using Build System?</summary></entry><entry><title type="html">If Sublimetext3 Anaconda Gets Slow</title><link href="http://localhost:4000/blog/2017/02/27/if-sublimetext3-anaconda-gets-slow/" rel="alternate" type="text/html" title="If Sublimetext3 Anaconda Gets Slow" /><published>2017-02-27T00:00:00-08:00</published><updated>2017-02-27T00:00:00-08:00</updated><id>http://localhost:4000/blog/2017/02/27/if-sublimetext3-anaconda-gets-slow</id><content type="html" xml:base="http://localhost:4000/blog/2017/02/27/if-sublimetext3-anaconda-gets-slow/">&lt;p&gt;Recently I find Anaconda plugin for Sublime Text 3 has some performance issue. If your buffer is wider than like 20,000 characters, or higher than 5,000 lines, Anaconda will fall beyond its capability, the Autocomplete, Docstring and Goto_definition function will have several seconds’ lag or will take forever before they can show up, sometimes Anaconda’s jsonserver.py process even takes 100% CPU usage on one core and fails quiting when Sublime Text 3 main process is terminated.&lt;/p&gt;

&lt;p&gt;To solve this problem, you have two options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Try disabling jedi model built in Anaconda. The built-in jedi in Anaconda is a little old. You can find Anaconda’s package in directory &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/Library/Application Support/Sublime Text 3/Packages/anaconda&lt;/code&gt;, in subfolder anaconda_lib, rename jedi folder to prevent it from being loaded. Then install new jedi into Python’s site-packages using pip or similar Python package managers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reduce your file size if possible. Since Anaconda has performance problem, we can avoid that by controlling file size or split one file to multiple then merge them.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If this problem still happens, consider disabling Anaconda, or switching to other plugins or Python editors.&lt;/p&gt;</content><author><name>Easton Lee</name><email>me@eastonlee.com</email></author><summary type="html">Recently I find Anaconda plugin for Sublime Text 3 has some performance issue. If your buffer is wider than like 20,000 characters, or higher than 5,000 lines, Anaconda will fall beyond its capability, the Autocomplete, Docstring and Goto_definition function will have several seconds’ lag or will take forever before they can show up, sometimes Anaconda’s jsonserver.py process even takes 100% CPU usage on one core and fails quiting when Sublime Text 3 main process is terminated.</summary></entry></feed>